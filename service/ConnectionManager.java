package com.objectfrontier.training.service;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

/**
 * @author Lokesh.
 * @since Sep 27, 2018
 */
public class ConnectionManager {

    private Connection connection;

    public ConnectionManager(String url, String resourceName) throws IOException, SQLException {
        this.connection = getConnection(url, resourceName);
        autoCommit(false);
    }

    public ConnectionManager(Connection con) {
        super();
        this.connection = con;
    }

    public Connection getConnection(String url, String resourceName) throws IOException, SQLException {

        try (InputStream propertyFileStream = getClass().getResourceAsStream(resourceName)) {
            Properties connectionCredentials = new Properties();
            connectionCredentials.load(propertyFileStream);
            Connection con = DriverManager.getConnection(url, connectionCredentials);
            return con;
        }
    }

    public ResultSet executeQuery(PreparedStatement statement) throws SQLException {
        ResultSet resultSet = statement.executeQuery();
        return resultSet;
    }

    public int executeUpdate(PreparedStatement statement) throws SQLException {
        int result = statement.executeUpdate();
        return result;
    }

    public PreparedStatement createStatement(String sqlQuery) throws SQLException {

        PreparedStatement statement = connection.prepareStatement(sqlQuery);
        return statement;

    }

    public PreparedStatement createStatement(String sqlQuery, int autoGeneratedKeyStatus) throws SQLException {
        PreparedStatement statement = connection.prepareStatement(sqlQuery, autoGeneratedKeyStatus);
        return statement;

    }

    public void rollBack() throws SQLException {
        connection.rollback();
    }

    public void commit() throws SQLException {
        connection.commit();
    }

    public void autoCommit(boolean status) throws SQLException {
        connection.setAutoCommit(status);
    }

    public void close() throws SQLException {
        connection.close();
    }
}
